/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.carlosespinoza.conversordemoneda;

/**
 *
 * @author charl
 */
public class PanelDistancia extends javax.swing.JFrame {

    /**
     * Creates new form PanelDistancia
     */
    public PanelDistancia() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        boxDistancia1 = new javax.swing.JComboBox<>();
        boxDistancia2 = new javax.swing.JComboBox<>();
        txtDistancia1 = new javax.swing.JTextField();
        txtDistancia2 = new javax.swing.JTextField();
        btn_previus = new javax.swing.JButton();
        btn_convertir = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Conversor de Distancias");

        boxDistancia1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "milimetros--mm", "centimetros--cm", "Metros--M", "Kilometros--Km", "Pulgadas--inch", "Pies--ft", "Yardas--yd", "Millas--mi" }));

        boxDistancia2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "milimetros--mm", "centimetros--cm", "Metros--M", "Kilometros--Km", "Pulgadas--inch", "Pies--ft", "Yardas--yd", "Millas--mi" }));

        txtDistancia1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDistancia1KeyTyped(evt);
            }
        });

        txtDistancia2.setEnabled(false);

        btn_previus.setText("Regresar");
        btn_previus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_previusActionPerformed(evt);
            }
        });

        btn_convertir.setText("Convertir");
        btn_convertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_convertirActionPerformed(evt);
            }
        });

        btn_exit.setText("Salir");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_previus)
                                .addGap(80, 80, 80)
                                .addComponent(btn_convertir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                                .addComponent(btn_exit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(boxDistancia2, 0, 125, Short.MAX_VALUE)
                                    .addComponent(boxDistancia1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDistancia1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDistancia2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDistancia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDistancia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDistancia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDistancia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_previus)
                    .addComponent(btn_convertir)
                    .addComponent(btn_exit))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDistancia1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDistancia1KeyTyped
        
        int key = evt.getKeyChar();

        boolean numeros = key >= 48 && key <= 57;

        if (!numeros)
        {
        evt.consume();
        }

        if (txtDistancia1.getText().trim().length() == 10) {
        evt.consume();
        }
    }//GEN-LAST:event_txtDistancia1KeyTyped

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        PanelConfirmacion jfSalir = new PanelConfirmacion();
        jfSalir.show();
        dispose();
    }//GEN-LAST:event_btn_exitActionPerformed

    private void btn_convertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_convertirActionPerformed
        int box1 = boxDistancia1.getSelectedIndex();
        int box2 = boxDistancia2.getSelectedIndex();
        double conversion = Double.parseDouble(txtDistancia1.getText());
        double distancias [][] = {
            {1,0.1,0.001,0.000001,0.0393701,0.00328084167,0.00109361389,0.00000062137},
            {10,1,0.01,0.00001,0.393701,0.032808,0.010936,0.0000062137},
            {1000,100,1,0.001,39.3701,3.2808,1.0936,0.00062137,},
            {1000000,100000,1000,1,39370.08,3280.84,1093.61,0.621371},
            {25.4,2.54,0.0254,0.0000254,1,0.083333,0.027778,0.0000157828},
            {304.8,30.48,0.3048,0.0003048,12,1,0.333333,0.00018939,},
            {914.4,91.44,0.9144,0.0009144,36,3,1,0.00056818},
            {1609344,160934.4,1609.34,1.6093,63360,5280,1760,1}
        };
//----------------------------------------------------------------------------------
        
        // Conversion de milimetros a milimetros
        if (box1 == 0 && box2 == 0) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de milimetros a centimetros
        if (box1 == 0 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a metros
        if (box1 == 0 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a Kilometros
        if (box1 == 0 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a pulgadas
        if (box1 == 0 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a pies
        if (box1 == 0 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a yardas
        if (box1 == 0 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de milimetros a millas
        if (box1 == 0 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de centimetros a centimetros
        if (box1 == 1 && box2 == 1) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de centimetros a milimetros
        if (box1 == 1 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a metros
        if (box1 == 1 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a Kilometros
        if (box1 == 1 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a pulgadas
        if (box1 == 1 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a pies
        if (box1 == 1 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a yardas
        if (box1 == 1 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de centrimetros a millas
        if (box1 == 1 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de metros a metros
        if (box1 == 2 && box2 == 2) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de metros a milimetros
        if (box1 == 2 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a centrimetros
        if (box1 == 2 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a Kilometros
        if (box1 == 2 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a pulgadas
        if (box1 == 2 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a pies
        if (box1 == 2 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a yardas
        if (box1 == 2 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de metros a millas
        if (box1 == 2 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de kilometros a kilometros
        if (box1 == 3 && box2 == 3) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de kilometros a milimetros
        if (box1 == 3 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a centrimetros
        if (box1 == 3 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a metros
        if (box1 == 3 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a pulgadas
        if (box1 == 3 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a pies
        if (box1 == 3 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a yardas
        if (box1 == 3 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de kilometros a millas
        if (box1 == 3 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de pulgadas a pulgadas
        if (box1 == 4 && box2 == 4) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de pulgadas a milimetros
        if (box1 == 4 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a centrimetros
        if (box1 == 4 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a metros
        if (box1 == 4 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a kilometros
        if (box1 == 4 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a pies
        if (box1 == 4 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a yardas
        if (box1 == 4 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pulgadas a millas
        if (box1 == 4 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de pies a pies
        if (box1 == 5 && box2 == 5) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de pies a milimetros
        if (box1 == 5 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a centrimetros
        if (box1 == 5 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a metros
        if (box1 == 5 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a kilometros
        if (box1 == 5 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a pulgadas
        if (box1 == 5 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a yardas
        if (box1 == 5 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de pies a millas
        if (box1 == 5 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de yardas a yardas
        if (box1 == 6 && box2 == 6) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de yardas a milimetros
        if (box1 == 6 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a centrimetros
        if (box1 == 6 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a metros
        if (box1 == 6 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a kilometros
        if (box1 == 6 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a pulgadas
        if (box1 == 6 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a pies
        if (box1 == 6 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de yardas a millas
        if (box1 == 6 && box2 == 7) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
//----------------------------------------------------------------------------------
        
        // Conversion de millas a millas
        if (box1 == 7 && box2 == 7) {            
                txtDistancia2.setText(String.valueOf(distancias[box1][box2]));            
        }
        // Conversion de millas a milimetros
        if (box1 == 7 && box2 == 0) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a centrimetros
        if (box1 == 7 && box2 == 1) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a metros
        if (box1 == 7 && box2 == 2) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a kilometros
        if (box1 == 7 && box2 == 3) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a pulgadas
        if (box1 == 7 && box2 == 4) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a pies
        if (box1 == 7 && box2 == 5) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        // Conversion de millas a yardas
        if (box1 == 7 && box2 == 6) {
                conversion *= distancias[box1][box2];
                txtDistancia2.setText(String.valueOf(conversion));            
        }
        
    }//GEN-LAST:event_btn_convertirActionPerformed

    private void btn_previusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_previusActionPerformed
       // Regresamos a la ventana Principal
        PanelPrincipal jfNew = new PanelPrincipal();
        jfNew.show();
        dispose();
    }//GEN-LAST:event_btn_previusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelDistancia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxDistancia1;
    private javax.swing.JComboBox<String> boxDistancia2;
    private javax.swing.JButton btn_convertir;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_previus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtDistancia1;
    private javax.swing.JTextField txtDistancia2;
    // End of variables declaration//GEN-END:variables
    // End of variables declaration                   
}
